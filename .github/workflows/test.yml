
name: Build tikAero

on: 
  push:
    tags:
      - 'v*.*.*'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: "version of build in format vX.Y.Z"
        required: true

jobs:
  prepare:
    runs-on: windows
    outputs:
      version: ${{ steps.version-step.outputs.version }}
    env:
      Solution_Name: tikAero

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if manually dispatched
        id: version-step
        run: |
            if ($env:GITHUB_EVENT_NAME -eq "workflow_dispatch") {
              # Use the manually provided version from workflow input
              $VERSION = "${{ inputs.version }}"
            } else {
              # Extract the tag name from the GITHUB_REF environment variable
              $TAG_NAME = $env:GITHUB_REF -replace '^refs/tags/'
              # Use the tag as the version
              $VERSION = $TAG_NAME
            }
            echo "version=$VERSION" >> $env:GITHUB_OUTPUT
          
  build-dependencies:
    runs-on: windows
    needs: prepare
    steps:
      - name: Build test
        run: |
            Write-Host "Build version is $buildversion"

  build-tikAero:
    runs-on: windows
    needs: [prepare, build-dependencies]
    steps:
      - name: Build main
        run: |
            Write-Host " Building ${{ needs.prepare.outputs.version }}"
      

    # build vbp tikAero
    #- name: Try to build action
    #  uses: bravoaero/avantik-toolings/actions/build-vb6@master
    #  with:
    #    vbpprojectpath: "./EXEs/tikAERO/tikAero.vbp"
    #    varsion: "v1.0.1"
    #    outdir: "./EXEs/tikAERO/"

    # # Execute all unit tests in the solution
    # - name: Execute unit tests
    #   run: dotnet test

    # # Restore the application to populate the obj folder with RuntimeIdentifiers
    # - name: Restore the application
    #   run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
    #   env:
    #     Configuration: ${{ matrix.configuration }}

    # # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode the pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
    #     $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
    #     [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    # # Create the app package by building and packaging the Windows Application Packaging project
    # - name: Create the app package
    #   run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
    #   env:
    #     Appx_Bundle: Always
    #     Appx_Bundle_Platforms: x86|x64
    #     Appx_Package_Build_Mode: StoreUpload
    #     Configuration: ${{ matrix.configuration }}

    # # Remove the pfx
    # - name: Remove the pfx
    #   run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-a-build-artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Wap_Project_Directory }}\AppPackages
